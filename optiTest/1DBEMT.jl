### A Pluto.jl notebook ###
# v0.19.42

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID("6e696c72-6542-2067-7265-42206c756150"), "AbstractPlutoDingetjes")].Bonds.initial_value catch; b -> missing; end
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)
        el
    end
end

# ╔═╡ 3e8c15fa-1849-11ef-06cc-9f00a35504ed
import Pkg; Pkg.activate(".")

# ╔═╡ 2e23de4e-c372-492d-9376-ea122eec8d1e
using PlutoUI, Plots, Interpolations, NLsolve

# ╔═╡ 5989f521-4479-48ac-8517-0d217bf9e877
md"""

α : angle of attack

θ : blade twist (β)

ϕ : inflow angle

"""

# ╔═╡ 23a99269-aaa3-45e0-89e3-da655af50c53
# xfoil data = [:, [alpha, CL, CD, CDp, CM, Top_Xtr, Bot_Xtr]]

# ╔═╡ cd8e7730-855d-45ec-8356-5b3b4cd67de0
# ╠═╡ disabled = true
#=╠═╡
function linearInterpolation(phiW::Float64, phiE::Float64, x::Float64, dx::Float64)
	
	1/dx *(x *phiE + (dx -x) *phiW)
end
  ╠═╡ =#

# ╔═╡ c29e9f3c-66ab-4386-9d50-f54d095e8f10
# ╠═╡ disabled = true
#=╠═╡
function Interp1D(x::AbstractVector, y::AbstractVector, x1::Float64)
	@assert x1 > x[1] 
	@assert x1 < x[end]
	dx = x[2] - x[1]
	#if x1 < 0
	### i = convert(Int64, floor( (x1 -x[1]) /dx)) +1
	i = findall(x -> x>=x1, x)[1]
	#elseif x1 > 0
	#	i = convert(Int64, floor( (x1 -x[1]) /dx)) - 2
	#elseif x1 == 0
	#	i = convert(Int64, floor( (x1 -x[1]) /dx)) - 1
	#end
	#x = x1 % dx
	x = x1 - x[i]
	linearInterpolation(y[i], y[i+1], x, dx)
end
  ╠═╡ =#

# ╔═╡ 848f6acc-327e-4d2e-bcf9-4a4c21dd9a28
xfoildata = [-15.750  -0.8374   0.08373   0.08141  -0.0585   1.0000   0.0169
 -15.500  -0.9127   0.06837   0.06591  -0.0687   1.0000   0.0166
 -15.250  -1.0965   0.03328   0.03022  -0.0993   1.0000   0.0153
 -15.000  -1.1161   0.03120   0.02803  -0.0956   1.0000   0.0154
 -14.750  -1.1210   0.02977   0.02651  -0.0926   1.0000   0.0156
 -14.500  -1.1215   0.02857   0.02523  -0.0896   1.0000   0.0159
 -14.250  -1.1181   0.02751   0.02407  -0.0870   1.0000   0.0162
 -14.000  -1.0990   0.02637   0.02282  -0.0871   0.9992   0.0166
 -13.750  -1.0711   0.02533   0.02165  -0.0885   0.9979   0.0170
 -13.500  -1.0462   0.02365   0.01985  -0.0903   0.9963   0.0177
 -13.250  -1.0163   0.02288   0.01905  -0.0918   0.9951   0.0183
 -13.000  -0.9847   0.02237   0.01850  -0.0933   0.9943   0.0189
 -12.750  -0.9549   0.02183   0.01790  -0.0943   0.9930   0.0195
 -12.500  -0.9260   0.02126   0.01724  -0.0952   0.9911   0.0201
 -12.250  -0.8954   0.02078   0.01666  -0.0963   0.9894   0.0206
 -12.000  -0.8682   0.01946   0.01525  -0.0976   0.9877   0.0214
 -11.750  -0.8365   0.01894   0.01471  -0.0990   0.9866   0.0220
 -11.500  -0.8038   0.01852   0.01424  -0.1004   0.9857   0.0227
 -11.250  -0.7707   0.01808   0.01375  -0.1019   0.9849   0.0235
 -11.000  -0.7369   0.01769   0.01328  -0.1035   0.9843   0.0242
 -10.750  -0.7070   0.01745   0.01297  -0.1041   0.9819   0.0246
 -10.500  -0.6803   0.01619   0.01161  -0.1049   0.9793   0.0257
 -10.250  -0.6491   0.01569   0.01109  -0.1060   0.9775   0.0264
 -10.000  -0.6172   0.01529   0.01065  -0.1071   0.9759   0.0271
  -9.750  -0.5850   0.01491   0.01022  -0.1082   0.9742   0.0279
  -9.500  -0.5547   0.01456   0.00981  -0.1089   0.9718   0.0287
  -9.250  -0.5287   0.01426   0.00944  -0.1085   0.9665   0.0292
  -9.000  -0.5023   0.01345   0.00855  -0.1085   0.9622   0.0299
  -8.750  -0.4769   0.01285   0.00791  -0.1082   0.9574   0.0309
  -8.500  -0.4513   0.01249   0.00752  -0.1078   0.9519   0.0317
  -8.250  -0.4243   0.01214   0.00713  -0.1076   0.9474   0.0324
  -8.000  -0.3979   0.01184   0.00678  -0.1073   0.9422   0.0333
  -7.750  -0.3715   0.01155   0.00644  -0.1070   0.9363   0.0340
  -7.500  -0.3442   0.01127   0.00609  -0.1068   0.9313   0.0345
  -7.250  -0.3183   0.01080   0.00556  -0.1064   0.9249   0.0354
  -7.000  -0.2921   0.01033   0.00505  -0.1061   0.9186   0.0365
  -6.750  -0.2649   0.01003   0.00471  -0.1059   0.9125   0.0375
  -6.500  -0.2377   0.00977   0.00441  -0.1057   0.9053   0.0384
  -6.000  -0.1825   0.00935   0.00389  -0.1054   0.8910   0.0404
  -5.750  -0.1549   0.00912   0.00360  -0.1052   0.8835   0.0414
  -5.500  -0.1275   0.00880   0.00325  -0.1051   0.8751   0.0435
  -5.000  -0.0718   0.00845   0.00283  -0.1049   0.8578   0.0476
  -4.750  -0.0441   0.00824   0.00259  -0.1047   0.8488   0.0519
  -4.500  -0.0162   0.00810   0.00243  -0.1046   0.8388   0.0569
  -4.250   0.0117   0.00793   0.00228  -0.1045   0.8288   0.0655
  -4.000   0.0394   0.00780   0.00213  -0.1044   0.8184   0.0745
  -3.750   0.0674   0.00769   0.00201  -0.1044   0.8073   0.0820
  -3.500   0.0954   0.00761   0.00191  -0.1043   0.7964   0.0890
  -3.250   0.1232   0.00752   0.00180  -0.1042   0.7851   0.0977
  -3.000   0.1512   0.00745   0.00171  -0.1041   0.7733   0.1066
  -2.750   0.1791   0.00737   0.00163  -0.1040   0.7616   0.1182
  -2.500   0.2069   0.00729   0.00156  -0.1040   0.7497   0.1332
  -2.250   0.2346   0.00723   0.00150  -0.1039   0.7378   0.1502
  -2.000   0.2625   0.00715   0.00145  -0.1038   0.7254   0.1697
  -1.750   0.2903   0.00709   0.00142  -0.1038   0.7132   0.1927
  -1.500   0.3180   0.00703   0.00141  -0.1037   0.7012   0.2214
  -1.250   0.3456   0.00701   0.00139  -0.1036   0.6886   0.2466
  -1.000   0.3734   0.00697   0.00138  -0.1035   0.6754   0.2686
  -0.750   0.4012   0.00694   0.00137  -0.1035   0.6626   0.2903
  -0.500   0.4288   0.00691   0.00138  -0.1034   0.6497   0.3203
  -0.250   0.4562   0.00686   0.00139  -0.1033   0.6365   0.3629
   0.000   0.4833   0.00678   0.00141  -0.1032   0.6232   0.4192
   0.250   0.5102   0.00658   0.00146  -0.1031   0.6101   0.5177
   0.500   0.5366   0.00635   0.00153  -0.1029   0.5975   0.6393
   0.750   0.5622   0.00617   0.00160  -0.1024   0.5856   0.7449
   1.000   0.5842   0.00594   0.00170  -0.1009   0.5740   0.8717
   1.250   0.6163   0.00588   0.00177  -0.1014   0.5622   0.9842
   1.500   0.6525   0.00598   0.00181  -0.1033   0.5505   1.0000
   1.750   0.6788   0.00611   0.00186  -0.1029   0.5398   1.0000
   2.000   0.7055   0.00622   0.00192  -0.1026   0.5294   1.0000
   2.250   0.7325   0.00633   0.00199  -0.1024   0.5204   1.0000
   2.500   0.7592   0.00646   0.00206  -0.1022   0.5112   1.0000
   2.750   0.7865   0.00656   0.00213  -0.1020   0.5029   1.0000
   3.250   0.8405   0.00681   0.00231  -0.1016   0.4847   1.0000
   3.500   0.8672   0.00696   0.00240  -0.1014   0.4746   1.0000
   3.750   0.8941   0.00709   0.00250  -0.1012   0.4646   1.0000
   4.000   0.9210   0.00722   0.00260  -0.1010   0.4540   1.0000
   4.250   0.9473   0.00739   0.00272  -0.1007   0.4426   1.0000
   4.500   0.9734   0.00758   0.00284  -0.1004   0.4273   1.0000
   4.750   0.9993   0.00778   0.00297  -0.1001   0.4110   1.0000
   5.000   1.0254   0.00797   0.00311  -0.0998   0.3979   1.0000
   5.250   1.0518   0.00813   0.00326  -0.0995   0.3861   1.0000
   5.500   1.0777   0.00834   0.00342  -0.0992   0.3731   1.0000
   5.750   1.1031   0.00857   0.00359  -0.0988   0.3575   1.0000
   6.000   1.1280   0.00884   0.00379  -0.0983   0.3398   1.0000
   6.250   1.1523   0.00914   0.00401  -0.0978   0.3207   1.0000
   6.500   1.1761   0.00948   0.00426  -0.0971   0.2993   1.0000
   6.750   1.1988   0.00989   0.00455  -0.0963   0.2737   1.0000
   7.000   1.2208   0.01036   0.00488  -0.0954   0.2461   1.0000
   7.250   1.2417   0.01089   0.00526  -0.0943   0.2173   1.0000
   7.500   1.2614   0.01149   0.00569  -0.0931   0.1865   1.0000
   7.750   1.2793   0.01220   0.00621  -0.0915   0.1526   1.0000
   8.000   1.2973   0.01288   0.00672  -0.0900   0.1252   1.0000
   8.250   1.3164   0.01345   0.00719  -0.0887   0.1065   1.0000
   8.500   1.3346   0.01404   0.00769  -0.0872   0.0893   1.0000
   8.750   1.3514   0.01469   0.00823  -0.0854   0.0729   1.0000
   9.000   1.3676   0.01527   0.00875  -0.0836   0.0622   1.0000
   9.250   1.3835   0.01581   0.00926  -0.0817   0.0563   1.0000
   9.500   1.4004   0.01631   0.00976  -0.0799   0.0521   1.0000
   9.750   1.4171   0.01682   0.01028  -0.0782   0.0491   1.0000
  10.000   1.4317   0.01746   0.01091  -0.0762   0.0459   1.0000
  10.250   1.4484   0.01797   0.01147  -0.0746   0.0442   1.0000
  10.500   1.4653   0.01849   0.01203  -0.0731   0.0427   1.0000
  10.750   1.4805   0.01911   0.01267  -0.0714   0.0411   1.0000
  11.000   1.4938   0.01986   0.01343  -0.0695   0.0392   1.0000
  11.250   1.5061   0.02069   0.01430  -0.0676   0.0376   1.0000
  11.500   1.5221   0.02129   0.01495  -0.0662   0.0368   1.0000
  11.750   1.5369   0.02199   0.01570  -0.0647   0.0356   1.0000
  12.000   1.5500   0.02282   0.01656  -0.0631   0.0343   1.0000
  12.250   1.5608   0.02382   0.01758  -0.0614   0.0330   1.0000
  12.500   1.5688   0.02506   0.01888  -0.0594   0.0316   1.0000
  12.750   1.5831   0.02588   0.01975  -0.0582   0.0308   1.0000
  13.000   1.5959   0.02683   0.02075  -0.0569   0.0298   1.0000
  13.250   1.6066   0.02796   0.02192  -0.0555   0.0286   1.0000
  13.500   1.6141   0.02939   0.02338  -0.0540   0.0273   1.0000
  13.750   1.6213   0.03089   0.02494  -0.0526   0.0262   1.0000
  14.000   1.6325   0.03209   0.02620  -0.0516   0.0252   1.0000
  14.250   1.6414   0.03354   0.02770  -0.0505   0.0241   1.0000
  14.500   1.6474   0.03528   0.02947  -0.0493   0.0229   1.0000
  14.750   1.6508   0.03731   0.03156  -0.0482   0.0218   1.0000
  15.000   1.6585   0.03899   0.03332  -0.0474   0.0209   1.0000
  15.250   1.6638   0.04096   0.03533  -0.0466   0.0198   1.0000
  15.500   1.6661   0.04330   0.03772  -0.0458   0.0187   1.0000
  15.750   1.6666   0.04589   0.04037  -0.0451   0.0179   1.0000
  16.000   1.6698   0.04827   0.04284  -0.0447   0.0171   1.0000
  16.250   1.6706   0.05099   0.04562  -0.0443   0.0164   1.0000
  16.500   1.6692   0.05402   0.04871  -0.0440   0.0157   1.0000
  16.750   1.6638   0.05759   0.05235  -0.0439   0.0151   1.0000
  17.000   1.6605   0.06101   0.05587  -0.0439   0.0146   1.0000
  17.250   1.6584   0.06435   0.05931  -0.0441   0.0142   1.0000
  17.500   1.6548   0.06793   0.06298  -0.0444   0.0138   1.0000
  17.750   1.6497   0.07175   0.06689  -0.0448   0.0134   1.0000
  18.000   1.6430   0.07583   0.07106  -0.0453   0.0131   1.0000
  18.250   1.6346   0.08024   0.07555  -0.0461   0.0128   1.0000
  18.500   1.6237   0.08507   0.08047  -0.0470   0.0124   1.0000
  18.750   1.6097   0.09040   0.08590  -0.0482   0.0121   1.0000]

# ╔═╡ c5197c18-01b6-4fc9-8f6f-89b0d449d045
# ╠═╡ disabled = true
#=╠═╡
function Interp1D(x::AbstractVector, y::AbstractVector, x1::AbstractVector)
	
	map(x1) do xx
		Interp1D(x,y,xx)
	end
end
  ╠═╡ =#

# ╔═╡ ecf38406-e4ee-4b6c-a9c7-c5bb3331995b
#plot(xfoildata[:,1], xfoildata[:,3], label="CD")

# ╔═╡ a78cd565-146c-433f-a4a8-63ba1c6dbbff
#plot(xfoildata[:,3], xfoildata[:,2], label="CL-CD")

# ╔═╡ ee5b3516-0cdb-4f24-86af-c55adde1672b
#plot(xfoildata[:,1], xfoildata[:,2] ./xfoildata[:,3], label="CL/CD - alpha")

# ╔═╡ 5a2e6e25-5990-4027-9b34-38952815e895
begin
	calc_Cn(ϕ, CL, CD) = CL *cos(ϕ) - CD *sin(ϕ)
	calc_Ct(ϕ, CL, CD) = - CL *sin(ϕ) + CD *cos(ϕ)
	calc_a(ϕ, F, σ′, Cn) = ( 1 - 4*F*sin(ϕ) /(σ′*Cn) )^-1
	calc_a′(ϕ, F, σ′, Ct) = ( 4 *F*sin(ϕ)*cos(ϕ) /(σ′*Ct) - 1 )^-1
end

# ╔═╡ 9ca8fe39-1d12-41ce-8057-54780fffee67
begin
	interpCL(α) = linear_interpolation(xfoildata[:,1], xfoildata[:,2])(α)
	interpCD(α) = linear_interpolation(xfoildata[:,1], xfoildata[:,3])(α)
end

# ╔═╡ b9dcb277-a501-419d-9177-e9efc2db6bdf
begin
	plot(xfoildata[:,1], xfoildata[:,2], label="CL")
	#scatter!([0],[0.4833])
	x = -15:0.35:15
	y = interpCL.(x)
	#y = Interp1D(xfoildata[:,1], xfoildata[:,2], x)
	scatter!(x, y, ms=1.5, label="linear Interpolation")
end

# ╔═╡ ac086d7e-fc17-4562-9f71-bf8ec07adba6
# Residual function R(ϕ)

function R(ϕ, θ, F, σ′, Uinf, Ω, r)

	# calculate angle of attack
	α = θ - ϕ

	# calculate CL = f(α)
	CL = interpCL(α)

	# calculate CD = f(α)
	CD = interpCD(α)

	# calculate Cn as ϕ
	Cn = calc_Cn(ϕ, CL, CD)

	# calculate Ct as ϕ
	Ct = calc_Ct(ϕ, CL, CD) 

	# calculate a (according to Nings2020 derivation)
	a = calc_a(ϕ, F, σ′, Cn)

	# calculate a' (according to Nings2020 derivation)
	a′ = calc_a′(ϕ, F, σ′, Ct)
	
	# return Residual
	return sin(ϕ)/(a -1) - Uinf*cos(ϕ) /(Ω*r*(1-a′)) 
end

# ╔═╡ 1ff48174-bce3-46da-a493-16cdc8e9f966
begin
	calc_W(Uinf, Ω, r, a, a′) = sqrt(Uinf^2 *(1-a)^2 + (Ω*r*(1 +a′))^2)
	calc_T(N, Cn, ρ, W, c, r) = N*Cn*0.5*ρ*W^2*c*r
	calc_Q(N, Ct, ρ, W, c, r) = N*Ct*0.5*ρ*W^2*c*r^2
end

# ╔═╡ 4ee8e69b-62f1-490e-938c-3906452cacde
function solve_R(Rfunc; x0=-0.01)
	sol = nlsolve((phi)->Rfunc(phi[1]), [x0], method=:trust_region)
	print(sol)
	sol.zero[1]
end

# ╔═╡ 3d22dda1-7003-45c5-a5ca-5c8ead9aa7b3
function calc_CLCD(ϕ, θ)
	α = θ - ϕ

	# calculate CL = f(α)
	CL = interpCL(α)

	# calculate CD = f(α)
	CD = interpCD(α)

	return (alpha=α, CL=CL, CD=CD)
end

# ╔═╡ 0c81d2ec-d8f8-47ee-a5ce-5d9ecd3a0d9d
# M = (OmegaPrime) - Moperational = 0


# ╔═╡ 7bd8f32a-4342-4300-933f-84a350f06b14
thetaDegree = @bind thetaDegree Slider(-0.01:-1:-90, show_value=true)

# ╔═╡ 6ceaf755-e555-4197-be3d-b09d32cf3570
# geometry settings
begin
	Rtip = 0.127
	Rhub = 0.1 *Rtip
	N = 3

	r = 1. *Rtip
	chord = 0.041 *Rtip
	theta = thetaDegree*pi/180
	sigmaPrime = N*chord/(2*pi*r)
end

# ╔═╡ baf3d473-e947-4910-895d-511a5c9c8ade
# operating conditions
begin
	f = 1.0
	Vinf = 35.0
	Omega = 5400*pi/30
	rho = 1.225

	R((ϕ)) = R(ϕ, theta, f, sigmaPrime, Vinf, Omega, r) 
end

# ╔═╡ b35248fb-f6be-4158-90be-73e878207378
plot([(-pi/2:0.01:-0.01)...] .*180/pi, R.(-pi/2:0.01:-0.01), ylims=(-2,2), label="R(ϕ)", title="solution region or R(ϕ)")

# ╔═╡ 3b61471b-b1e5-4f0f-b8a9-c11ced904f7d
@time solve_R(R)

# ╔═╡ 9b29f07e-6bd3-4017-a11d-2c370db68c56
begin
	# for each sections (r/R)
	# 	solve R(ϕ*) = 0
	phiStar = solve_R(R)
	
	# 	calculate Cn, Ct, a, a' as function of ϕ*
	alpha, CL, CD = calc_CLCD(phiStar, theta)
	Cn = calc_Cn(phiStar, CL, CD)
	Ct = calc_Ct(phiStar, CL, CD)
	a = calc_a(phiStar, f, sigmaPrime, Cn)
	aprime = calc_a′(phiStar, f, sigmaPrime, Ct)
	
	# 	calculate W
	W = calc_W(Vinf, Omega, r, a, aprime)
	
	# 	calculate T'
	Tprime = calc_T(N, Cn, rho, W, chord, r)
	
	# 	calculate Q'
	Qprime = calc_Q(N, Ct, rho, W, chord, r)
	
	# calculate T and Q by integrating through each section
	#(Rtip -Rhub)*Tprime
	#(Rtip -Rhub)*Qprime
	
	# calculate power as Q Ω
	#(Rtip -Rhub)*Qprime*Omega

	alpha*180/pi, Tprime, Qprime
end

# ╔═╡ 4b614d82-d954-400e-9513-58f0c8ed34db
let
	c = 1
	println("theta = $(theta *180/pi)")
	println("alpha = $(alpha *180/pi)")
	println("phiStar = $(phiStar *180/pi)")
	println("W = $(W)")

	airfoilOx = 0
	airfoilOy = 0 
	airfoilLEx = airfoilOy +c*cos(theta)
	airfoilLEy = airfoilOx +c*sin(theta)

	WOx = cos(phiStar)
	WOy = sin(phiStar)
	#Wx = 1/cos(phiStar)
	#Wy = 1/sin(phiStar)
	
	p = plot(size=(500,500), xlims=(-2,2), ylims=(-2,2))
	
	plot!(p, [airfoilOx, airfoilLEx], [airfoilOy, airfoilLEy], linewidth=2, c=:black, label=nothing)

	plot!(p, [WOx, airfoilOx], [WOy, airfoilOy], linewidth=1, c=:blue, label=nothing)
	#quiver!(p, [WOx],[WOy], quiver=([Wx],[Wy]))

	#print((Wx^2+Wy^2)|>sqrt)
end

# ╔═╡ Cell order:
# ╠═3e8c15fa-1849-11ef-06cc-9f00a35504ed
# ╠═2e23de4e-c372-492d-9376-ea122eec8d1e
# ╟─5989f521-4479-48ac-8517-0d217bf9e877
# ╠═23a99269-aaa3-45e0-89e3-da655af50c53
# ╟─cd8e7730-855d-45ec-8356-5b3b4cd67de0
# ╟─c29e9f3c-66ab-4386-9d50-f54d095e8f10
# ╟─848f6acc-327e-4d2e-bcf9-4a4c21dd9a28
# ╟─c5197c18-01b6-4fc9-8f6f-89b0d449d045
# ╠═b9dcb277-a501-419d-9177-e9efc2db6bdf
# ╠═ecf38406-e4ee-4b6c-a9c7-c5bb3331995b
# ╠═a78cd565-146c-433f-a4a8-63ba1c6dbbff
# ╠═ee5b3516-0cdb-4f24-86af-c55adde1672b
# ╠═ac086d7e-fc17-4562-9f71-bf8ec07adba6
# ╠═5a2e6e25-5990-4027-9b34-38952815e895
# ╠═9ca8fe39-1d12-41ce-8057-54780fffee67
# ╠═1ff48174-bce3-46da-a493-16cdc8e9f966
# ╟─b35248fb-f6be-4158-90be-73e878207378
# ╠═6ceaf755-e555-4197-be3d-b09d32cf3570
# ╠═baf3d473-e947-4910-895d-511a5c9c8ade
# ╠═4ee8e69b-62f1-490e-938c-3906452cacde
# ╠═3d22dda1-7003-45c5-a5ca-5c8ead9aa7b3
# ╠═3b61471b-b1e5-4f0f-b8a9-c11ced904f7d
# ╠═9b29f07e-6bd3-4017-a11d-2c370db68c56
# ╠═0c81d2ec-d8f8-47ee-a5ce-5d9ecd3a0d9d
# ╠═7bd8f32a-4342-4300-933f-84a350f06b14
# ╠═4b614d82-d954-400e-9513-58f0c8ed34db
